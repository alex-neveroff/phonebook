{"version":3,"file":"static/js/851.10f573f7.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.styled.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/EditContactForm/EditContactForm.styled.js","redux/contacts/contactsSelectors.js","components/EditContactForm/EditContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/SearchFilter/SearchFilter.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/SearchFilter/SearchFilter.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { transitions } from 'variables/transitions';\nimport { colors } from 'variables/colors';\n\nexport const ContactData = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 18px;\n\n  .contact-align {\n    display: flex;\n    flex-direction: column;\n    width: 85%;\n    gap: 5px;\n    @media screen and (min-width: 768px) {\n      flex-direction: row;\n      justify-content: space-between;\n      align-items: center;\n    }\n  }\n\n  .contact-number {\n    font-weight: 500;\n  }\n  .button-wrap {\n    display: flex;\n    gap: 4px;\n  }\n  .contact-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    width: 24px;\n    height: 24px;\n    border: none;\n    padding: 0;\n\n    background-color: transparent;\n\n    color: ${colors.primary};\n    transition: color ${transitions.transition},\n      box-shadow ${transitions.transition};\n\n    &:hover,\n    &:focus {\n      box-shadow: 0px 0px 15px ${colors.focusShadow};\n      outline: none;\n      color: ${colors.iconHover};\n    }\n    &:active {\n      color: ${colors.iconActive};\n    }\n  }\n  .icon {\n    display: block;\n    width: 70%;\n    height: 70%;\n    pointer-events: none;\n    stroke: currentColor;\n    fill: currentColor;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { colors } from 'variables/colors';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 150;\n`;\n\nexport const ModalWindow = styled.div`\n  padding: 20px;\n  border-radius: 10px;\n  background-color: ${colors.backgroundMain};\n  overflow: hidden;\n  box-shadow: 0px 0px 10px ${colors.mainShadow};\n  @media screen and (min-width: 768px) {\n    width: 450px;\n  }\n\n  .modal-content {\n    max-width: calc(100vw - 48px);\n    max-height: calc(100vh - 24px);\n  }\n`;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ModalWindow, Overlay } from './Modal.styled';\n\nconst Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleOverlayClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n  return (\n    <Overlay onClick={handleOverlayClick}>\n      <ModalWindow>{children}</ModalWindow>\n    </Overlay>\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\nimport { transitions } from 'variables/transitions';\nimport { colors } from 'variables/colors';\n\nexport const EditForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin: 0 auto;\n\n  .form-label {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    font-size: 18px;\n    font-weight: bold;\n  }\n\n  .form-input {\n    height: 30px;\n    padding-left: 10px;\n    border: none;\n    border-radius: 7px;\n    background-color: ${colors.backgroundMain};\n    color: ${colors.primary};\n    box-shadow: 0px 0px 10px ${colors.mainShadow};\n    transition: box-shadow ${transitions.transition};\n    &:focus {\n      box-shadow: 0px 0px 10px ${colors.focusShadow};\n      outline: none;\n    }\n  }\n  .form-submit {\n    height: 30px;\n    border: none;\n    border-radius: 7px;\n    margin-top: 15px;\n    background-color: ${colors.headerBcg};\n    color: ${colors.primary};\n    box-shadow: 5px 5px 5px ${colors.mainShadow};\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: box-shadow ${transitions.transition},\n      background-color ${transitions.transition},\n      transform ${transitions.transition};\n    &:hover {\n      background-color: ${colors.mainShadow};\n      box-shadow: 5px 5px 5px ${colors.focusShadow};\n    }\n    &:active {\n      transform: scale(0.95);\n      box-shadow: 1px 2px 2px ${colors.focusShadow};\n    }\n  }\n`;\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsShowAddModal = state => state.contacts.isShowAddModal;\nexport const selectIsShowEditModal = state => state.contacts.isShowEditModal;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport { editModalReducer } from 'redux/contacts/contactsSlice';\nimport { EditForm } from './EditContactForm.styled';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { Notify } from 'notiflix';\n\nconst EditContactForm = ({ contact }) => {\n  const { name, number, _id } = contact;\n  const [inputName, setInputName] = useState(name);\n  const [inputNumber, setInputNumber] = useState(number);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setInputName(value);\n    } else if (name === 'number') {\n      setInputNumber(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (inputName.trim() === '' || inputNumber.trim() === '') {\n      dispatch(editModalReducer(true));\n      return;\n    }\n    const loweredEditContact = inputName.trim().toLowerCase();\n    const numberEditContact = inputNumber.trim();\n    const isContactExists = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === loweredEditContact &&\n        contact.number === numberEditContact\n    );\n    if (isContactExists) {\n      Notify.failure(\n        `${inputName.trim()} with phone ${inputNumber.trim()} is already in phonebook.`\n      );\n      return;\n    }\n    dispatch(\n      editContact({\n        contactId: _id,\n        name: inputName.trim(),\n        number: inputNumber.trim(),\n      })\n    );\n    dispatch(editModalReducer(false));\n    reset();\n  };\n\n  const reset = () => {\n    setInputName('');\n    setInputNumber('');\n  };\n\n  return (\n    <EditForm onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className=\"form-label\" htmlFor=\"contactName\">\n        Name:\n        <input\n          className=\"form-input\"\n          type=\"text\"\n          name=\"name\"\n          id=\"contactName\"\n          placeholder=\"Full name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          value={inputName}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n      <label className=\"form-label\" htmlFor=\"ContactNumber\">\n        Phone number:\n        <input\n          className=\"form-input\"\n          type=\"tel\"\n          name=\"number\"\n          id=\"ContactNumber\"\n          placeholder=\"Phone number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={handleChange}\n          value={inputNumber}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n      <button className=\"form-submit\" type=\"submit\">\n        Edit contact\n      </button>\n    </EditForm>\n  );\n};\n\nEditContactForm.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default EditContactForm;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaRegTrashAlt, FaRegEdit } from 'react-icons/fa';\nimport { ContactData } from './ContactListItem.styled';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport Modal from 'components/Modal/Modal';\nimport EditContactForm from 'components/EditContactForm/EditContactForm';\nimport { selectIsShowEditModal } from 'redux/contacts/contactsSelectors';\nimport { editModalReducer } from 'redux/contacts/contactsSlice';\n\nconst ContactListItem = ({ _id, name, number }) => {\n  const dispatch = useDispatch();\n  const isShowEditModal = useSelector(selectIsShowEditModal);\n  const [editContact, setEditContact] = useState(null);\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const handleEdit = () => {\n    setEditContact({ _id, name, number });\n    dispatch(editModalReducer(true));\n  };\n\n  const handleModalClose = () => {\n    setEditContact(null);\n    dispatch(editModalReducer(false));\n  };\n\n  return (\n    <ContactData key={_id}>\n      <div className=\"contact-align\">\n        <p className=\"contact-name\">{name}</p>\n        <p className=\"contact-number\">{number}</p>\n      </div>\n      <div className=\"button-wrap\">\n        <button type=\"button\" className=\"contact-button\" onClick={handleEdit}>\n          <FaRegEdit className=\"icon\" />\n        </button>\n        <button\n          type=\"button\"\n          className=\"contact-button\"\n          onClick={() => handleDelete(_id)}\n        >\n          <FaRegTrashAlt className=\"icon\" />\n        </button>\n      </div>\n      {isShowEditModal && editContact && (\n        <Modal onClose={handleModalClose}>\n          <EditContactForm contact={editContact} />\n        </Modal>\n      )}\n    </ContactData>\n  );\n};\n\nContactListItem.propTypes = {\n  _id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import styled from '@emotion/styled';\nimport { colors } from 'variables/colors';\n\nexport const ContactListStyled = styled.div`\n  overflow-y: auto;\n  max-height: calc(100% - 100px);\n  .contact-list {\n    height: 60vh;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin: 0 auto;\n    @media screen and (min-width: 768px) {\n      width: 600px;\n    }\n  }\n  @media screen and (min-width: 768px) {\n    &::-webkit-scrollbar {\n      width: 8px;\n    }\n    &::-webkit-scrollbar-track {\n      background: ${colors.headerBcg};\n    }\n    &::-webkit-scrollbar-thumb {\n      background: ${colors.headerBcg};\n    }\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport ContactListItem from 'components/ContactListItem';\nimport { ContactListStyled } from './ContactList.styled';\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelectors';\n\nconst ContactList = () => {\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const showContacts = contacts\n    .filter(contact => contact.name.toLowerCase().includes(filter))\n    .sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    );\n\n  return (\n    <ContactListStyled>\n      <ul className=\"contact-list\">\n        {showContacts.map(({ _id, name, number }) => (\n          <ContactListItem key={_id} _id={_id} name={name} number={number} />\n        ))}\n      </ul>\n    </ContactListStyled>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\nimport { colors } from 'variables/colors';\nimport { transitions } from 'variables/transitions';\n\nexport const SearchForm = styled.label`\n  display: flex;\n  gap: 20px;\n  font-size: 18px;\n  font-weight: bold;\n  margin: 0 auto;\n  @media screen and (min-width: 768px) {\n    width: 600px;\n  }\n  .input-wrap {\n    position: relative;\n    width: 100%;\n  }\n  .search-input {\n    width: 100%;\n    height: 30px;\n    padding-left: 34px;\n    margin-bottom: 20px;\n    border: none;\n    border-radius: 7px;\n    color: ${colors.primary};\n    background-color: ${colors.backgroundMain};\n    box-shadow: 0px 0px 10px ${colors.mainShadow};\n    transition: box-shadow ${transitions.transition};\n    &:focus {\n      box-shadow: 0px 0px 10px ${colors.focusShadow};\n      outline: none;\n    }\n  }\n  .contact-button {\n    cursor: pointer;\n    width: 30px;\n    height: 30px;\n    border: none;\n    padding: 0;\n\n    background-color: transparent;\n\n    color: ${colors.primary};\n    transition: color ${transitions.transition},\n      box-shadow ${transitions.transition};\n\n    &:hover,\n    &:focus {\n      box-shadow: 0px 0px 15px ${colors.focusShadow};\n      outline: none;\n      color: ${colors.iconHover};\n    }\n    &:active {\n      color: ${colors.iconActive};\n    }\n  }\n  .icon {\n    display: block;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    stroke: currentColor;\n    fill: currentColor;\n  }\n\n  .icon-search {\n    position: absolute;\n    top: 4px;\n    left: 4px;\n    width: 20px;\n    height: 20px;\n    fill: currentColor;\n    transition: fill ${transitions.transition};\n  }\n  .focused {\n    fill: ${colors.iconActive};\n  }\n`;\n","import styled from '@emotion/styled';\nimport { transitions } from 'variables/transitions';\nimport { colors } from 'variables/colors';\n\nexport const PhonebookForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin: 0 auto;\n\n  .form-label {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    font-size: 18px;\n    font-weight: bold;\n  }\n\n  .form-input {\n    height: 30px;\n    padding-left: 10px;\n    border: none;\n    border-radius: 7px;\n    background-color: ${colors.backgroundMain};\n    color: ${colors.primary};\n    box-shadow: 0px 0px 10px ${colors.mainShadow};\n    transition: box-shadow ${transitions.transition};\n    &:focus {\n      box-shadow: 0px 0px 10px ${colors.focusShadow};\n      outline: none;\n    }\n  }\n  .form-submit {\n    height: 30px;\n    border: none;\n    border-radius: 7px;\n    margin-top: 15px;\n    background-color: ${colors.headerBcg};\n    color: ${colors.primary};\n    box-shadow: 5px 5px 5px ${colors.mainShadow};\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: box-shadow ${transitions.transition},\n      background-color ${transitions.transition},\n      transform ${transitions.transition};\n    &:hover {\n      background-color: ${colors.mainShadow};\n      box-shadow: 5px 5px 5px ${colors.focusShadow};\n    }\n    &:active {\n      transform: scale(0.95);\n      box-shadow: 1px 2px 2px ${colors.focusShadow};\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addModalReducer } from 'redux/contacts/contactsSlice';\nimport { PhonebookForm } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [inputName, setInputName] = useState('');\n  const [inputNumber, setInputNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setInputName(value);\n    } else if (name === 'number') {\n      setInputNumber(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newContact = {\n      name: inputName.trim(),\n      number: inputNumber.trim(),\n    };\n    const loweredNewContact = newContact.name.toLowerCase();\n    const numberNewContact = newContact.number;\n    const isContactExists = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === loweredNewContact &&\n        contact.number === numberNewContact\n    );\n    if (isContactExists) {\n      Notify.failure(\n        `${newContact.name} with phone ${newContact.number} is already in phonebook.`\n      );\n      return;\n    }\n    dispatch(addContact(newContact));\n    dispatch(addModalReducer(false));\n    reset();\n  };\n\n  const reset = () => {\n    setInputName('');\n    setInputNumber('');\n  };\n\n  return (\n    <PhonebookForm onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className=\"form-label\" htmlFor=\"contactName\">\n        Name:\n        <input\n          className=\"form-input\"\n          type=\"text\"\n          name=\"name\"\n          id=\"contactName\"\n          placeholder=\"Full name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          value={inputName}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n      <label className=\"form-label\" htmlFor=\"ContactNumber\">\n        Phone number:\n        <input\n          className=\"form-input\"\n          type=\"tel\"\n          name=\"number\"\n          id=\"ContactNumber\"\n          placeholder=\"Phone number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={handleChange}\n          value={inputNumber}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n      <button className=\"form-submit\" type=\"submit\">\n        Add contact\n      </button>\n    </PhonebookForm>\n  );\n};\n\nexport default ContactForm;\n","import React, { useState } from 'react';\nimport { SearchForm } from 'components/SearchFilter/SearchFilter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterReducer, addModalReducer } from 'redux/contacts/contactsSlice';\nimport Modal from 'components/Modal/Modal';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { FaSearch, FaRegPlusSquare } from 'react-icons/fa';\nimport {\n  selectFilter,\n  selectIsShowAddModal,\n} from 'redux/contacts/contactsSelectors';\n\nconst SearchFilter = () => {\n  const filter = useSelector(selectFilter);\n  const isShowAddModal = useSelector(selectIsShowAddModal);\n  const [isFocused, setIsFocused] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n  };\n\n  const handleFilter = event => {\n    dispatch(filterReducer(event.currentTarget.value));\n  };\n\n  return (\n    <SearchForm htmlFor=\"filter-field\">\n      <button\n        className=\"contact-button\"\n        onClick={() => dispatch(addModalReducer(true))}\n      >\n        <FaRegPlusSquare className=\"icon\" />\n      </button>\n      <div className=\"input-wrap\">\n        <FaSearch className={`icon-search ${isFocused ? 'focused' : ''}`} />\n        <input\n          className=\"search-input\"\n          id=\"filter-field\"\n          type=\"text\"\n          placeholder=\"Find contacts by name\"\n          value={filter}\n          onChange={handleFilter}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n        />\n      </div>\n      {isShowAddModal && (\n        <Modal onClose={() => dispatch(addModalReducer(false))}>\n          <ContactForm />\n        </Modal>\n      )}\n    </SearchForm>\n  );\n};\n\nexport default SearchFilter;\n","import styled from '@emotion/styled';\n\nexport const NotificationStyled = styled.div`\n  margin: 0 auto;\n  @media screen and (min-width: 768px) {\n    width: 600px;\n  }\n  .notifivation-text {\n    font-size: 18px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { NotificationStyled } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return (\n    <NotificationStyled>\n      <p className=\"notifivation-text\">{message}</p>\n    </NotificationStyled>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { useEffect } from 'react';\nimport ContactList from 'components/ContactList';\nimport SearchFilter from 'components/SearchFilter';\nimport Notification from 'components/Notification';\nimport Loader from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectIsAuthorized } from 'redux/auth/authSelectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isAuthorized = useSelector(selectIsAuthorized);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isAuthorized) return;\n    dispatch(fetchContacts());\n  }, [dispatch, isAuthorized]);\n\n  return (\n    <>\n      <h1 className=\"title main-title\">Contacts</h1>\n      <SearchFilter />\n      {error && <Notification message={error} />}\n      {contacts.length > 0 ? (\n        <>\n          {isLoading && !error && <Loader />}\n          {contacts.length > 0 ? (\n            <ContactList />\n          ) : (\n            <Notification message=\"No matches found\" />\n          )}\n        </>\n      ) : (\n        <Notification message=\"Your phonebook is empty\" />\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactData","styled","li","_templateObject","_taggedTemplateLiteral","colors","primary","transitions","transition","focusShadow","iconHover","iconActive","Overlay","div","ModalWindow","_templateObject2","backgroundMain","mainShadow","_ref","onClose","children","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","_jsx","onClick","currentTarget","target","EditForm","form","headerBcg","selectContacts","state","contacts","selectIsLoading","isLoading","selectIsShowAddModal","isShowAddModal","selectIsShowEditModal","isShowEditModal","selectError","error","selectFilter","filter","contact","name","number","_id","_useState","useState","_useState2","_slicedToArray","inputName","setInputName","_useState3","_useState4","inputNumber","setInputNumber","useSelector","dispatch","useDispatch","handleChange","_event$currentTarget","value","reset","_jsxs","onSubmit","preventDefault","trim","loweredEditContact","toLowerCase","numberEditContact","isContactExists","some","Notify","failure","concat","editContact","contactId","editModalReducer","autoComplete","className","htmlFor","type","id","placeholder","pattern","title","onChange","required","setEditContact","FaRegEdit","deleteContact","FaRegTrashAlt","Modal","EditContactForm","ContactListStyled","showContacts","includes","sort","firstContact","secondContact","localeCompare","map","ContactListItem","SearchForm","label","PhonebookForm","newContact","loweredNewContact","numberNewContact","addContact","addModalReducer","isFocused","setIsFocused","FaRegPlusSquare","FaSearch","filterReducer","onFocus","onBlur","ContactForm","NotificationStyled","message","isAuthorized","selectIsAuthorized","fetchContacts","_Fragment","SearchFilter","Notification","length","Loader","ContactList"],"sourceRoot":""}